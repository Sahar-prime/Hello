#include <iostream>
using namespace std;
//#define FACTORIAL
//#define POWER
//#define FIBONACCI
//define SIMPLE_NUMB
//#define PERFECT_NUMB
//#define PITHAGORAS_TABLE

void main()
{
    setlocale(LC_ALL, "");

#ifdef FACTORIAL
    int n;
    cout << "Введите число: "; cin >> n;
    double f = 1;
    for (int i = 1; i <= n; i++) 
    {
        cout << i << "! = ";
        f *= i;
        cout << f << "\n";
    }
    cout << endl;
#endif

#ifdef POWER
    double a; //основание степени
    int n = 2; //показатель степени
    cout << "Введите основание степени: "; cin >> a;
    /*cout << "Введите показатель степени: "; cin >> n;*/

    double N = 1;
    
    if (n < 0) 
    {
        a = 1 / a;
        n = -n;
    }

    for (int i = 0; i < n; i++) 
    {
        N *= a;
    }
    cout << N << endl;
    main();
#endif

#ifdef FIBONACCI
    int n;
    cout << "Введите предел для ряда Фибоначчи: "; cin >> n;
    for (int a = 0, b = 1, c = a + b; a <= n; a = b, b = c, c = a, c = a + b)
        cout << a << "\t";
#endif

#ifdef SIMPLE_NUMB
    int n;
    cout << "Введите предельное число: "; cin >> n;
    for (int i = 0; i <= n; i++)
    {
        bool simple = true; //предположим, что число простое,
        //но это нужно проверить
        for (int j = 2; j <= sqrt(i); j++) //Функция sqrt(n) возращает квадратный корень числа 'n'
        {
            if (i % j == 0) 
            {
                simple = false;
                break;
            }
        }
        if (simple) cout << i << "\t";
    }
    cout << endl;
#endif

#ifdef PERFECT_NUMB
    int n;
    cout << "Введите предельное число: "; cin >> n;
    for (int i = 0; i <= n; i++) 
    {
        int sum = 0;
        for (int j = 1; j <= i/2; j++)
        {
            if (i % j == 0) 
            {
                sum += j;
            }
        }
        if (i == sum) cout << i << "\t";
    }
#endif

#ifdef PITHAGORAS_TABLE
    for (int i = 1; i <= 10; i++) 
    {
        for (int j = 1; j <= 10; j++)
        {
            cout << i * j << "\t";
        }
        cout << endl;
    }
#endif
}
/*
for - цикл на заданное число итераций
У цикла for следующие синтаксис:
for (counter; condition; expression)
{
    ......;
    group - of - statements;
    ......;
}
Counter - счетчик цикла, т.е. это переменная, которая считает сколько раз выполнился или будет выполнен ЦИКЛ.
Эту переменную можно объявить как в самом цикле выражения counter, так и перед цилком.
Если счетчик объявлен в самом выражении, то он является локальным для этого цикла, т.е. существует только в этом цикле и только в его области видимости
А именно в его круглых и фигурных скобках.
Локальный счетчик удаляется из памяти по завершении всех итераций
Если счетчик глобальный, т.е. объявлен перед for, то он будет существовать и после for.
Выражение counter обрабатывает 1 раз - перед первой итерации
-------------------------------------------------------------------
Condition - условие продолжения или завершения цикла.
В этом условии, как правило, счетчик сравнивается с каким-либо значением.
Условие проверяется перед каждой итерацией
Условие проверяется перед каждой итерацией и если условие вернуло true тело цикла выполняется, в противном случае происходит выход за пределы цилка.
-------------------------------------------------------------------
Expression - выражение, которое изменяет счетчик.
В этом выражении можно писать абсолютно все что угодно, но, как правило, здесь пишут Increment/Decrement счетчика.
Expression отрабатывает после каждой итерации!!!!!
После чего снова проверяется условие

Как правило for пишется вот так:
int n = 10
for(int i = 0; i < n; i++)
{
    .......;
    cout << i << "\t";
    .......;
}
У цикла for может быть несколько счетчиков, в таком случае они объявляются и инициализируются через запятуюю
В условии может участвовать так 1, так и несколько счетчиков 
*/