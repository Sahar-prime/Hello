#include<iostream>
using namespace std;

//#define Elochka

#define first_str "\t\t\t\t\t\t\t"
#define strok "\n\t\t\t\t\t\t"
#define hi "+++++"

#ifdef Elochka
void main()
{
	setlocale(LC_ALL, "Russian");
	cout << first_str hi;
	cout << strok << "В лесу родилась елочка,\n\t\t\t\t\t\tВ лесу она росла,\n\t\t\t\t\t\tЗимой и летом стройная,\n\t\t\t\t\t\tЗеленая была.\n";
	cout << strok << "Метель ей пела песенку:\n\t\t\t\t\t\t\"Спи, елочка, бай - бай!\"\n\t\t\t\t\t\tМороз снежком укутывал:\n\t\t\t\t\t\t\"Смотри, не замерзай!\"\n";
	cout << strok << "Трусишка зайка серенький\n\t\t\t\t\t\tПод елочкой скакал.\n\t\t\t\t\t\tПорою волк, сердитый волк\n\t\t\t\t\t\tРысцою пробегал.\n";
	cout << strok << "Чу! Снег по лесу частому\n\t\t\t\t\t\tПод полозом скрипит,\n\t\t\t\t\t\tЛошадка мохноногая\n\t\t\t\t\t\tТоропится, бежит.\n";
	cout << strok << "Везет лошадка дровенки,\n\t\t\t\t\t\tА в дровнях старичок,\n\t\t\t\t\t\tСрубил он нашу елочку\n\t\t\t\t\t\tПод самый корешок.\n";
	cout << strok << "Теперь она, нарядная,\n\t\t\t\t\t\tHа праздник к нам пришла\n\t\t\t\t\t\tИ много, много радости\n\t\t\t\t\t\tДетишкам принесла!\n";
}
#endif //Elochka


//Ctrl+F7 - компиляция
//Ctrl+F5 - запуск

/*
------------------------------------------------
#include<iostream>
# - показывает что #include - это директива
Директива - это указатель компилятору на выполнение некоторых действий
Директива #inslude (включить, подключить) указывет компилятору на то, что к нашему исходному файлу нужно подключить другой файл, в данном случае <iostream>
При компиляции но место директивы #include происходит встраивание содержимого другого файла в наш файл.
Библиотека <iostream> содержит потоки ввода/вывода cin/cout для ввода с клавиатуры и вывода на экран.
Имя другого файла может быть указано в <> или ""
<> - компилятор будет искать файл в системных каталогах Visual Studio
"" - компилятор будет искать файл сначала в каталоге с проэктов, а потом в системных каталогах Visual Studio
------------------------------------------------
using namespace std;
Говорит компилятору использовать пространство имет 'std'
В этом именном пространстве объявляны потоки cin/cout
Пространства имен нужны для повторного использования имен.
Именные пространства очень удобно сравнивать с каталогами (папками).
------------------------------------------------
viod main()
main() - это главная функция, которая является точкой входа, поскольку с нее начинается выполнение любой программы.
Функция main() обязательно должна быть в любом проэкте, но только 1, в противном случае возникают ошибки на этапе компоновки.
() - подсказывают, что main() - это функция
{} - показывают тело и область видимости функции main()
void(Пустота) - показывает, что фунция main() ничего не возращает по завершении.
------------------------------------------------
cout (Console Out) - поток вывода на экран. Выводит значения в окно консоли.
cout может выводить сколько угодно значений, при этом они разделяются <<.
<< - оператор перенаправления в поток, направляет значения в поток 'cout'.
"Hello World" - это строковая константа.
Строковая константа - это последовательность символов, заключенная в "".
; - признак конца выражения, так же как . является признаком конца предложения в письменной речи.
------------------------------------------------
Директива #define.
define - определить (definition - определение)
Директива define создает макроопределение (Макрос), которые показывает кампилятору, что нужно заменить и чем заменить.
В нашем случае str заменает табулятором:
	#define strok "\n\t\t\t\t\t\t"
strok - это имя макроса, а табуляторы - значение макроса.
#define, как и любые директивы, отрабатывают на этапе компиляции.
При помощи директивы #define в C++ создавались константы.
Имя является важной частью макроса, но не у всех макросов есть значение. Например:
	#define Elochka
Такие макросы используется вместе директивами условной компиляции
------------------------------------------------
Escape - последовательности (Esc).
Esc нужны для выравнивания выводимой в консоль информации, и для вывода некоторых специальных символов.
Esc - это одиночные символы, экранированные символом \
/ - (Slash) - косая черта;
\ (BakcSlash) - символ отмены специального значения другого символа, он отменяет специальное значение символа, следующего за ним.
Например:
\" - отменяет специальное значение кавычек, следовательно кавычки рассматриваются как обычный символ, и выводится в консоль.
Некоторым символам \ наоборот придает специальное значение. Например:
\n - newline, перевод курсора в начало новой строки
\t - tab, вывод в консоль символа табуляции. Символ табуляции включает в себя до 8-ми пробелов.
*/