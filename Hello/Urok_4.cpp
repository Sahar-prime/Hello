/*
Выражения или Expression - это синтаксическая конструкция, состящая из операндов и операторов
Операнды - объекты, над которымы выполняется какое-то действие
В качестве операндов обычно выступают переменные и константы.
Операторы - объекты (элемнты выражения), которые показывают какое именно действие нужно выполнить над операндами
Операторы, как правила, обозначаются 1 или 2 специальными символами.
Операторы бывают: унарные, пинарные и тернарные
В языке С++ есть всего 1 тернарный оператор.
Все операторые в С++ можно разделить на следующие категории:
1. Arithmetical operators
2. Оператор присваивания (assignment operator)
Синтаксис оператора присваивания - l-value = r-value
Присвоить значит записать сохранить в память, запомнить, дать значение.
Выражение справа r-value в простейшем случае состоит из 1 переменной или константы. Но может быть бесконечно сложным и включать в себя какие угодно операции
У оператора присваивания очень низкий приоритет и ассоциативность с справа налево.
Ассоциативность включается тогда выражение состоит из операторов с одинаковым приоритетом, тогда это выражение может читаться слева направа или справа налево
У всех операторов С++ ассоциативность слева направо, кроме присваиваний
У операторов присваивания ассоциативность справа налево.
3. increment decrement
Increment(++) - унарный оператор который увеличивает значение переменной на 1
Decrement(--) - унарный оператор который уменьшает значение переменной на 1
У них есть 2 формы записи:
Префиксная и постфиксная 
Префиксная форма записи оператор пишеться перед операндом в препиксной формы, а постфиксная - после операнда
Префиксная и постфиксная форма записи Intcrement Decrement отличаются приоритетом по сравнению С ДРУГМИ ОПЕРАТОРАМИ
Можно сказать, что  у префиксной инкремента дикремента самый высокий приоритет, а у постфиксной самый низкий приоритет


*/

//#include<iostream>
//using namespace std;
//#define ARITHMETICAL_OPERATORS
//#define assignment_operator
//#define increment_decrement // intcrement/decrement (++, --)
//void n() 
//{
//	setlocale(LC_ALL, "");
//	cout << "Hello Operations!" << endl;
//
//#ifdef ARITHMETICAL_OPERATORS
//	//Unary: +, -;
//	//Binary: +, -, *, /, % - остаток деления;
//	//Остаток от деления всегда меньше делителя
//	//Если делимое меньше делителя, то оно полностью выпадается в остаток
//	cout << 17 / 3 << endl;
//	cout << 17 % 3 << endl;
//	//cout << 3. % 17 << endl; Операция остаток от деления не применимая к вещественным типам данным float и double
//	//При генерации случайных чисел 
//#endif
//
//#ifdef assignment_operator
//	int a, b, c = 2;
//	cout << a << "\t" << b << "\t" << c;
//#endif
//
//#ifdef increment_decrement
//	int i = 0;
//	++i; // Prefix Increment
//	i++;// Prostfix (Suffix) Decrement
//	--i; // Prefix Increment
//	i--; // Postfix Increment
//#endif
//}
//
